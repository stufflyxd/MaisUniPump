package com.example.unipump

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.Button
import android.widget.ImageButton
import android.widget.ScrollView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.unipump.adapters.FichaTreinoFunAdapter
import com.example.unipump.models.exercicioFun
import com.example.unipump.models.fichaTreinoFun
import com.example.unipump.models.serieFun
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.google.firebase.firestore.FirebaseFirestore
import java.util.Timer
import java.util.TimerTask

class TelaEdicaoFichaTreino_funcionario : AppCompatActivity() {

    private lateinit var btnNavegacao: BottomNavigationView
    private lateinit var btnSetaVoltar: ImageButton
    private lateinit var btnAdicionarExercicio: Button
    private lateinit var recyclerViewFichas: RecyclerView
    private lateinit var scrollView: ScrollView

    // Firestore
    private lateinit var db: FirebaseFirestore
    private var alunoDocId: String = ""
    private var documentId: String = "" // NOVO: ID √∫nico do documento no Firestore
    private var fichaLetra: String = ""
    private var fichaNome: String = ""
    private var fichaDescricao: String = ""

    // DEPRECADO: fichaId ser√° substitu√≠do por documentId
    @Deprecated("Use documentId instead")
    private var fichaId: String = ""

    // Adapter - Uma √∫nica ficha ser√° exibida, mas mantemos a estrutura de lista
    private lateinit var fichaTreinoAdapter: FichaTreinoFunAdapter
    private val fichasList = mutableListOf<fichaTreinoFun>()

    // Flag para controlar se h√° altera√ß√µes pendentes
    private var hasUnsavedChanges = false
    private var saveDebounceTimer: Timer? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        try {
            enableEdgeToEdge()
            setContentView(R.layout.activity_tela_edicao_ficha_treino_funcionario)

            // Inicializar Firestore
            db = FirebaseFirestore.getInstance()

            // Recuperar dados da ficha espec√≠fica
            if (!recuperarDadosIntent()) {
                return // Se n√£o conseguir recuperar dados, sai da activity
            }

            // Inicializar views
            initViews()

            // Configurar t√≠tulo da ficha
            configurarTituloFicha()

            // Configurar RecyclerView
            setupRecyclerView()

            // Debug da estrutura do Firestore
            debugFirestoreStructure()

            // Configurar eventos
            configurarEventos()

            // Carregar APENAS a ficha espec√≠fica do Firestore
            carregarFichaEspecificaDoFirestore()

        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro no onCreate", e)
            Toast.makeText(this, "Erro ao inicializar tela: ${e.message}", Toast.LENGTH_LONG).show()
            finish()
        }
    }

    // M√©todo para tratar retorno da TelaCriarFichaTreino_Funcionario
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        Log.d("ACTIVITY_RESULT", "=== ON ACTIVITY RESULT ===")
        Log.d("ACTIVITY_RESULT", "Request Code: $requestCode")
        Log.d("ACTIVITY_RESULT", "Result Code: $resultCode")
        Log.d("ACTIVITY_RESULT", "Data: $data")

        if (requestCode == REQUEST_CODE_ADD_EXERCICIO) {
            if (resultCode == RESULT_OK) {
                Log.d("ACTIVITY_RESULT", "‚úÖ Exerc√≠cio adicionado com sucesso!")

                // Extrair dados do resultado (se dispon√≠veis)
                data?.let { intent ->
                    val exercicioAdicionado = intent.getStringExtra("exercicio_adicionado")
                    val grupoMuscular = intent.getStringExtra("exercicio_grupo")
                    val mensagem = intent.getStringExtra("message")
                    val success = intent.getBooleanExtra("success", false)

                    Log.d("ACTIVITY_RESULT", "Dados do resultado:")
                    Log.d("ACTIVITY_RESULT", "  - exercicio_adicionado: '$exercicioAdicionado'")
                    Log.d("ACTIVITY_RESULT", "  - exercicio_grupo: '$grupoMuscular'")
                    Log.d("ACTIVITY_RESULT", "  - message: '$mensagem'")
                    Log.d("ACTIVITY_RESULT", "  - success: $success")

                    if (success && !exercicioAdicionado.isNullOrEmpty()) {
                        Toast.makeText(
                            this,
                            "‚úÖ '$exercicioAdicionado' foi adicionado √† ficha!",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }

                // Recarregar a ficha do Firestore para mostrar o novo exerc√≠cio
                Log.d("ACTIVITY_RESULT", "üîÑ Recarregando ficha do Firestore...")
                carregarFichaEspecificaDoFirestore()

            } else if (resultCode == RESULT_CANCELED) {
                Log.d("ACTIVITY_RESULT", "‚ùå Opera√ß√£o cancelada pelo usu√°rio")
                Toast.makeText(this, "Opera√ß√£o cancelada", Toast.LENGTH_SHORT).show()
            } else {
                Log.w("ACTIVITY_RESULT", "‚ö†Ô∏è Resultado inesperado: $resultCode")
            }
        } else {
            Log.d("ACTIVITY_RESULT", "Request code diferente: $requestCode")
        }
    }

    // M√âTODO CORRIGIDO: Agora recupera o documentId
    private fun recuperarDadosIntent(): Boolean {
        return try {
            // CR√çTICO: Recuperar o documentId passado da tela anterior
            documentId = intent.getStringExtra("documentId") ?: ""
            alunoDocId = intent.getStringExtra("alunoDocId") ?: ""
            fichaLetra = intent.getStringExtra("ficha_letra") ?: ""
            fichaNome = intent.getStringExtra("ficha_nome") ?: ""
            fichaDescricao = intent.getStringExtra("ficha_descricao") ?: ""

            // Para compatibilidade com c√≥digo antigo
            fichaId = documentId

            Log.d("EDICAO_FICHA", "=== DADOS RECUPERADOS ===")
            Log.d("EDICAO_FICHA", "Document ID: $documentId")
            Log.d("EDICAO_FICHA", "Aluno ID: $alunoDocId")
            Log.d("EDICAO_FICHA", "Ficha Letra: $fichaLetra")
            Log.d("EDICAO_FICHA", "Ficha Nome: $fichaNome")

            // Se n√£o veio por intent, tentar recuperar do SharedPreferences
            if (alunoDocId.isEmpty()) {
                val prefs = getSharedPreferences("alunoPrefs", MODE_PRIVATE)
                alunoDocId = prefs.getString("alunoDocId", "") ?: ""
                Log.d("EDICAO_FICHA", "Aluno ID recuperado do SharedPreferences: $alunoDocId")
            }

            // Verifica√ß√µes de seguran√ßa
            if (documentId.isEmpty()) {
                Toast.makeText(this, "ERRO: ID do documento n√£o encontrado!", Toast.LENGTH_LONG).show()
                Log.e("EDICAO_FICHA", "Document ID est√° vazio - n√£o ser√° poss√≠vel salvar altera√ß√µes!")
                finish()
                false
            } else if (alunoDocId.isEmpty()) {
                Toast.makeText(this, "ERRO: ID do aluno n√£o encontrado!", Toast.LENGTH_LONG).show()
                Log.e("EDICAO_FICHA", "Aluno ID est√° vazio!")
                finish()
                false
            } else if (fichaLetra.isEmpty()) {
                Toast.makeText(this, "ERRO: Letra da ficha n√£o encontrada!", Toast.LENGTH_SHORT).show()
                Log.e("EDICAO_FICHA", "Ficha letra est√° vazia!")
                finish()
                false
            } else {
                Log.d("EDICAO_FICHA", "‚úÖ Todos os dados necess√°rios foram recuperados com sucesso")
                true
            }
        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro ao recuperar dados do intent", e)
            Toast.makeText(this, "Erro ao recuperar dados", Toast.LENGTH_SHORT).show()
            finish()
            false
        }
    }

    private fun initViews() {
        try {
            btnNavegacao = findViewById(R.id.bottom_navigation)
            btnSetaVoltar = findViewById(R.id.SetaVoltarTelaEdicaoFicha)
            btnAdicionarExercicio = findViewById(R.id.btnAdicionar)
            recyclerViewFichas = findViewById(R.id.recyclerViewFichas)
            scrollView = findViewById(R.id.scrollView)

            Log.d("EDICAO_FICHA", "Views inicializadas com sucesso")
        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro ao inicializar views", e)
            throw e
        }
    }

    private fun configurarTituloFicha() {
        Log.d("EDICAO_FICHA", "T√≠tulo configurado para: Ficha $fichaLetra - $fichaNome")
    }

    private fun setupRecyclerView() {
        // Configurar adapter com callbacks
        fichaTreinoAdapter = FichaTreinoFunAdapter(
            fichas = fichasList,
            onExcluirFicha = { fichaIdCallback: String, position: Int ->
                // Callback para excluir ficha completa
                excluirFichaCompleta(fichaIdCallback, position)
            },
            onFichaAlterada = { fichaAlterada: fichaTreinoFun, position: Int ->
                // CALLBACK PRINCIPAL: Quando qualquer coisa na ficha for alterada
                Log.d("FICHA_ALTERADA", "Ficha alterada: ${fichaAlterada.letra} - ${fichaAlterada.nome}")
                Log.d("FICHA_ALTERADA", "Total de exerc√≠cios: ${fichaAlterada.exercicios.size}")

                // Listar exerc√≠cios e suas s√©ries para debug
                fichaAlterada.exercicios.forEachIndexed { exIndex, exercicio ->
                    Log.d("FICHA_ALTERADA", "  Exerc√≠cio $exIndex: ${exercicio.nome} (${exercicio.series.size} s√©ries)")
                    exercicio.series.forEachIndexed { serieIndex, serie ->
                        Log.d("FICHA_ALTERADA", "    S√©rie ${serie.numero}: ${serie.repeticoes} reps, ${serie.peso}, ${serie.tempo}s")
                    }
                }

                // Chamar o m√©todo que j√° existe para altera√ß√µes
                onFichaAlterada(fichaAlterada, position)
            }
        )

        recyclerViewFichas.apply {
            layoutManager = LinearLayoutManager(this@TelaEdicaoFichaTreino_funcionario)
            adapter = fichaTreinoAdapter

            // Configura√ß√µes otimizadas
            isNestedScrollingEnabled = false
            setHasFixedSize(false) // Permitir altura vari√°vel
            itemAnimator = null // Remover anima√ß√µes para melhor performance
        }

        // Debug do RecyclerView
        recyclerViewFichas.addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ ->
            Log.d("RECYCLERVIEW_DEBUG", "=== LAYOUT CHANGE ===")
            Log.d("RECYCLERVIEW_DEBUG", "Altura do RecyclerView: ${recyclerViewFichas.height}")
            Log.d("RECYCLERVIEW_DEBUG", "Itens vis√≠veis: ${recyclerViewFichas.childCount}")
            Log.d("RECYCLERVIEW_DEBUG", "Adapter count: ${fichaTreinoAdapter.itemCount}")

            // Verificar altura de cada item
            for (i in 0 until recyclerViewFichas.childCount) {
                val child = recyclerViewFichas.getChildAt(i)
                Log.d("RECYCLERVIEW_DEBUG", "Item $i altura: ${child.height}px")
            }
            Log.d("RECYCLERVIEW_DEBUG", "========================")
        }
    }

    // M√âTODO CORRIGIDO: Agora usa o documentId diretamente
    private fun debugFirestoreStructure() {
        Log.d("DEBUG_FIRESTORE", "=== INICIANDO DEBUG DA ESTRUTURA ESPEC√çFICA ===")
        Log.d("DEBUG_FIRESTORE", "Document ID: $documentId")
        Log.d("DEBUG_FIRESTORE", "Aluno ID: $alunoDocId")

        db.collection("alunos")
            .document(alunoDocId)
            .collection("treino")
            .document(documentId) // USAR DOCUMENT ID ESPEC√çFICO
            .get()
            .addOnSuccessListener { document ->
                Log.d("DEBUG_FIRESTORE", "Documento encontrado: ${document.exists()}")

                if (document.exists()) {
                    Log.d("DEBUG_FIRESTORE", "=== Dados do Documento ===")
                    Log.d("DEBUG_FIRESTORE", "ID: ${document.id}")
                    Log.d("DEBUG_FIRESTORE", "Letra: ${document.getString("letra")}")
                    Log.d("DEBUG_FIRESTORE", "Nome: ${document.getString("nome")}")

                    // Debug espec√≠fico dos exerc√≠cios
                    val exercicios = document.get("exercicios")
                    Log.d("DEBUG_FIRESTORE", "Exerc√≠cios (objeto completo): $exercicios")
                    Log.d("DEBUG_FIRESTORE", "Tipo dos exerc√≠cios: ${exercicios?.javaClass?.simpleName}")

                    if (exercicios is List<*>) {
                        Log.d("DEBUG_FIRESTORE", "Exerc√≠cios √© uma lista com ${exercicios.size} itens")
                        exercicios.forEachIndexed { exIndex, exercicio ->
                            Log.d("DEBUG_FIRESTORE", "  Exerc√≠cio $exIndex: $exercicio")
                            if (exercicio is Map<*, *>) {
                                val nome = exercicio["nome"]
                                val series = exercicio["series"]
                                Log.d("DEBUG_FIRESTORE", "    Nome: $nome")
                                Log.d("DEBUG_FIRESTORE", "    S√©ries: $series")
                                if (series is List<*>) {
                                    Log.d("DEBUG_FIRESTORE", "    N√∫mero de s√©ries: ${series.size}")
                                }
                            }
                        }
                    } else {
                        Log.w("DEBUG_FIRESTORE", "Exerc√≠cios N√ÉO √© uma lista! Tipo: ${exercicios?.javaClass}")
                    }
                } else {
                    Log.w("DEBUG_FIRESTORE", "Documento n√£o existe!")
                }

                Log.d("DEBUG_FIRESTORE", "=== FIM DO DEBUG ===")
            }
            .addOnFailureListener { e ->
                Log.e("DEBUG_FIRESTORE", "Erro no debug", e)
                e.printStackTrace()
            }
    }

    // M√©todo chamado quando uma ficha √© alterada
    private fun onFichaAlterada(fichaAlterada: fichaTreinoFun, position: Int) {
        Log.d("FICHA_ALTERADA", "Ficha alterada: ${fichaAlterada.letra} - ${fichaAlterada.nome}")

        // Marcar que h√° altera√ß√µes pendentes
        hasUnsavedChanges = true

        // Cancelar timer anterior
        saveDebounceTimer?.cancel()

        // Criar novo timer com delay de 1 segundo (debounce)
        saveDebounceTimer = Timer()
        saveDebounceTimer?.schedule(object : TimerTask() {
            override fun run() {
                runOnUiThread {
                    Log.d("DEBOUNCE_SAVE", "Executando salvamento com debounce")
                    salvarFichaAlteradaNoFirestore(fichaAlterada)
                }
            }
        }, 1000) // Aguarda 1 segundo ap√≥s a √∫ltima altera√ß√£o
    }

    // M√âTODO CORRIGIDO: Agora usa documentId para salvar
    private fun salvarFichaAlteradaNoFirestore(ficha: fichaTreinoFun) {
        Log.d("FIRESTORE_SAVE_IMMEDIATE", "=== SALVANDO ALTERA√á√ïES ===")
        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Document ID: $documentId")
        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Ficha: ${ficha.letra} - ${ficha.nome}")

        if (documentId.isEmpty() || alunoDocId.isEmpty()) {
            Log.e("FIRESTORE_SAVE_IMMEDIATE", "‚ùå IDs inv√°lidos")
            return
        }

        // CR√çTICO: Usar valores atuais do objeto ficha (que j√° foi atualizado pelo adapter)
        val letraAtualizada = ficha.letra
        val nomeAtualizado = ficha.nome

        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Valores a salvar - Letra: '$letraAtualizada', Nome: '$nomeAtualizado'")

        // Converter exerc√≠cios para o formato do Firestore
        val exerciciosArray = ficha.exercicios.map { exercicio ->
            mapOf(
                "nome" to exercicio.nome,
                "execucao" to "Execu√ß√£o normal",
                "frame" to "URL...",
                "series" to exercicio.series.map { serie ->
                    mapOf(
                        "ordem" to serie.numero.toString(),
                        "reps" to serie.repeticoes.toString(),
                        "peso" to serie.peso,
                        "descanso" to serie.tempo
                    )
                }
            )
        }

        val fichaData = hashMapOf(
            "letra" to letraAtualizada,
            "nome" to nomeAtualizado,
            "descricao" to fichaDescricao,
            "quantidadeExercicios" to ficha.exercicios.size,
            "exercicios" to exerciciosArray,
            "dataModificacao" to com.google.firebase.Timestamp.now()
        )

        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Caminho: alunos/$alunoDocId/treino/$documentId")

        db.collection("alunos")
            .document(alunoDocId)
            .collection("treino")
            .document(documentId)
            .update(fichaData as Map<String, Any>)
            .addOnSuccessListener {
                Log.d("FIRESTORE_SAVE_IMMEDIATE", "‚úÖ Ficha '$letraAtualizada' salva com sucesso!")
                hasUnsavedChanges = false

                // Atualizar vari√°veis locais para sincronia
                fichaLetra = letraAtualizada
                fichaNome = nomeAtualizado

                Log.d("FIRESTORE_SAVE_IMMEDIATE", "Vari√°veis locais atualizadas")
            }
            .addOnFailureListener { e ->
                Log.e("FIRESTORE_SAVE_IMMEDIATE", "‚ùå Erro ao salvar ficha", e)
                hasUnsavedChanges = true

                runOnUiThread {
                    Toast.makeText(this@TelaEdicaoFichaTreino_funcionario,
                        "Erro ao salvar: ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
                }

                // Retry ap√≥s 5 segundos
                Handler(Looper.getMainLooper()).postDelayed({
                    if (hasUnsavedChanges) {
                        Log.d("RETRY_SAVE", "Tentando salvar novamente ap√≥s erro")
                        salvarFichaAlteradaNoFirestore(ficha)
                    }
                }, 5000)
            }
    }

    private fun excluirFichaCompleta(fichaIdCallback: String, position: Int) {
        Log.d("EXCLUIR_FICHA", "Iniciando exclus√£o da ficha ID: $fichaIdCallback, posi√ß√£o: $position")

        // 1. Excluir do Firestore primeiro
        excluirFichaDoFirestore(fichaIdCallback) { sucesso ->
            runOnUiThread {
                if (sucesso) {
                    // 2. Se excluiu do Firestore com sucesso, remover da tela
                    fichaTreinoAdapter.removeFicha(position)

                    Toast.makeText(
                        this@TelaEdicaoFichaTreino_funcionario,
                        "Ficha exclu√≠da com sucesso",
                        Toast.LENGTH_SHORT
                    ).show()

                    Log.d("EXCLUIR_FICHA", "Ficha exclu√≠da com sucesso")

                    // 3. Se era a √∫nica ficha, voltar para tela anterior
                    if (fichasList.isEmpty()) {
                        Toast.makeText(
                            this@TelaEdicaoFichaTreino_funcionario,
                            "N√£o h√° mais fichas para editar",
                            Toast.LENGTH_SHORT
                        ).show()

                        // Voltar para tela anterior
                        finish()
                    }

                } else {
                    Toast.makeText(
                        this@TelaEdicaoFichaTreino_funcionario,
                        "Erro ao excluir ficha",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }

    private fun excluirFichaDoFirestore(fichaIdToDelete: String, callback: (Boolean) -> Unit) {
        Log.d("FIRESTORE_DELETE", "Excluindo ficha do Firestore - ID: $fichaIdToDelete")

        db.collection("alunos")
            .document(alunoDocId)
            .collection("treino")
            .document(fichaIdToDelete)
            .delete()
            .addOnSuccessListener {
                Log.d("FIRESTORE_DELETE", "Ficha exclu√≠da do Firestore com sucesso")
                callback(true)
            }
            .addOnFailureListener { exception ->
                Log.e("FIRESTORE_DELETE", "Erro ao excluir ficha do Firestore", exception)
                callback(false)
            }
    }

    // M√âTODO CORRIGIDO: Agora carrega usando documentId diretamente
    private fun carregarFichaEspecificaDoFirestore() {
        try {
            fichasList.clear()

            Log.d("FIRESTORE_EDICAO", "=== CARREGANDO FICHA ESPEC√çFICA ===")
            Log.d("FIRESTORE_EDICAO", "Document ID: $documentId")
            Log.d("FIRESTORE_EDICAO", "Aluno ID: $alunoDocId")

            // BUSCAR DIRETAMENTE PELO DOCUMENT ID (MAIS EFICIENTE)
            db.collection("alunos")
                .document(alunoDocId)
                .collection("treino")
                .document(documentId) // USAR DOCUMENT ID ESPEC√çFICO
                .get()
                .addOnSuccessListener { document ->
                    try {
                        Log.d("FIRESTORE_EDICAO", "Documento encontrado: ${document.exists()}")

                        if (!document.exists()) {
                            Log.w("FIRESTORE_EDICAO", "Documento n√£o encontrado: $documentId")
                            runOnUiThread {
                                Toast.makeText(
                                    this@TelaEdicaoFichaTreino_funcionario,
                                    "Ficha n√£o encontrada", Toast.LENGTH_SHORT
                                ).show()
                                finish() // Voltar se n√£o encontrar
                            }
                            return@addOnSuccessListener
                        }

                        // Processar o documento
                        val letra = document.getString("letra") ?: ""
                        val nome = document.getString("nome") ?: ""

                        Log.d("FIRESTORE_EDICAO", "Processando ficha: $documentId - Letra: $letra - Nome: $nome")

                        // Debug dos exerc√≠cios
                        val exerciciosRaw = document.get("exercicios")
                        Log.d("FIRESTORE_EDICAO", "Exerc√≠cios RAW do Firestore: $exerciciosRaw")
                        Log.d("FIRESTORE_EDICAO", "Tipo dos exerc√≠cios: ${exerciciosRaw?.javaClass?.simpleName}")

                        val exerciciosArray = document.get("exercicios") as? List<Map<String, Any>> ?: emptyList()
                        Log.d("FIRESTORE_EDICAO", "Array de exerc√≠cios convertido - Tamanho: ${exerciciosArray.size}")

                        val exerciciosList = mutableListOf<exercicioFun>()

                        // Processamento dos exerc√≠cios
                        exerciciosArray.forEachIndexed { exercicioIndex, exercicioMap ->
                            try {
                                Log.d("FIRESTORE_EDICAO", "=== Processando exerc√≠cio $exercicioIndex ===")
                                Log.d("FIRESTORE_EDICAO", "Dados do exerc√≠cio: $exercicioMap")

                                val nomeExercicio = exercicioMap["nome"]?.toString() ?: ""
                                Log.d("FIRESTORE_EDICAO", "Nome do exerc√≠cio: $nomeExercicio")

                                // Debug das s√©ries
                                val seriesRaw = exercicioMap["series"]
                                Log.d("FIRESTORE_EDICAO", "S√©ries RAW: $seriesRaw")
                                Log.d("FIRESTORE_EDICAO", "Tipo das s√©ries: ${seriesRaw?.javaClass?.simpleName}")

                                val seriesArray = exercicioMap["series"] as? List<Map<String, Any>> ?: emptyList()
                                Log.d("FIRESTORE_EDICAO", "Array de s√©ries convertido - Tamanho: ${seriesArray.size}")

                                val seriesList = seriesArray.mapIndexed { serieIndex, serieMap ->
                                    Log.d("FIRESTORE_EDICAO", "   S√©rie $serieIndex: $serieMap")

                                    serieFun(
                                        id = "${documentId}_ex${exercicioIndex}_serie${serieIndex}",
                                        numero = serieMap["ordem"]?.toString()?.toIntOrNull() ?: (serieIndex + 1),
                                        repeticoes = serieMap["reps"]?.toString()?.toIntOrNull() ?: 0,
                                        peso = serieMap["peso"]?.toString() ?: "",
                                        tempo = serieMap["descanso"]?.toString() ?: ""
                                    )
                                }.toMutableList()

                                val exercicio = exercicioFun(
                                    id = "${documentId}_exercicio_$exercicioIndex",
                                    nome = nomeExercicio,
                                    series = seriesList
                                )

                                exerciciosList.add(exercicio)
                                Log.d("FIRESTORE_EDICAO", "Exerc√≠cio adicionado: $nomeExercicio com ${seriesList.size} s√©ries")
                                Log.d("FIRESTORE_EDICAO", "Total de exerc√≠cios na lista agora: ${exerciciosList.size}")

                            } catch (e: Exception) {
                                Log.e("FIRESTORE_EDICAO", "Erro ao processar exerc√≠cio $exercicioIndex", e)
                                e.printStackTrace()
                            }
                        }

                        // Log final antes de criar a ficha
                        Log.d("FIRESTORE_EDICAO", "RESUMO FINAL:")
                        Log.d("FIRESTORE_EDICAO", "Total de exerc√≠cios processados: ${exerciciosList.size}")
                        exerciciosList.forEachIndexed { index, exercicio ->
                            Log.d("FIRESTORE_EDICAO", "Exerc√≠cio $index: ${exercicio.nome} (${exercicio.series.size} s√©ries)")
                        }

                        val ficha = fichaTreinoFun(
                            id = documentId, // USAR DOCUMENT ID
                            letra = letra,
                            nome = nome,
                            exercicios = exerciciosList
                        )

                        fichasList.add(ficha)
                        Log.d("FIRESTORE_EDICAO", "Ficha carregada: $letra - $nome com ${exerciciosList.size} exerc√≠cios")

                        // Atualizar UI
                        runOnUiThread {
                            try {
                                if (::fichaTreinoAdapter.isInitialized) {
                                    Log.d("FIRESTORE_EDICAO", "Notificando adapter com ${fichasList.size} fichas")
                                    if (fichasList.isNotEmpty()) {
                                        Log.d("FIRESTORE_EDICAO", "Primeira ficha tem ${fichasList.first().exercicios.size} exerc√≠cios")
                                    }

                                    fichaTreinoAdapter.notifyDataSetChanged()

                                    // Verifica√ß√£o adicional ap√≥s notificar
                                    recyclerViewFichas.post {
                                        Log.d("FIRESTORE_EDICAO", "Ap√≥s notifyDataSetChanged:")
                                        Log.d("FIRESTORE_EDICAO", "Adapter item count: ${fichaTreinoAdapter.itemCount}")
                                        Log.d("FIRESTORE_EDICAO", "RecyclerView child count: ${recyclerViewFichas.childCount}")

                                        // For√ßar atualiza√ß√£o dos contadores
                                        fichaTreinoAdapter.atualizarContadores()
                                    }
                                }

                                Toast.makeText(
                                    this@TelaEdicaoFichaTreino_funcionario,
                                    "Ficha $letra carregada com ${fichasList.firstOrNull()?.exercicios?.size ?: 0} exerc√≠cios",
                                    Toast.LENGTH_SHORT
                                ).show()

                            } catch (e: Exception) {
                                Log.e("FIRESTORE_EDICAO", "Erro ao atualizar UI", e)
                                e.printStackTrace()
                            }
                        }

                    } catch (e: Exception) {
                        Log.e("FIRESTORE_EDICAO", "Erro geral ao processar ficha", e)
                        e.printStackTrace()
                        runOnUiThread {
                            Toast.makeText(
                                this@TelaEdicaoFichaTreino_funcionario,
                                "Erro ao processar ficha: ${e.message}", Toast.LENGTH_LONG
                            ).show()
                        }
                    }
                }
                .addOnFailureListener { exception ->
                    Log.e("FIRESTORE_EDICAO", "Erro ao carregar ficha espec√≠fica", exception)
                    exception.printStackTrace()
                    runOnUiThread {
                        Toast.makeText(
                            this@TelaEdicaoFichaTreino_funcionario,
                            "Erro ao carregar ficha: ${exception.localizedMessage}",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                }

        } catch (e: Exception) {
            Log.e("FIRESTORE_EDICAO", "Erro ao iniciar carregamento da ficha", e)
            e.printStackTrace()
            Toast.makeText(this, "Erro ao carregar ficha: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    private fun configurarEventos() {
        try {
            btnNavegacao.setOnNavigationItemSelectedListener { item ->
                when (item.itemId) {
                    R.id.nav_inicio -> {
                        val intent = Intent(this, TelaFuncionario::class.java)
                        startActivity(intent)
                        true
                    }
                    R.id.nav_chat -> {
                        val intent = Intent(this, TelaChat::class.java)
                        startActivity(intent)
                        true
                    }
                    R.id.nav_config -> {
                        val intent = Intent(this, TelaConfiguracao_Funcionario::class.java)
                        startActivity(intent)
                        true
                    }
                    else -> false
                }
            }

            btnSetaVoltar.setOnClickListener {
                Log.d("LIFECYCLE", "Bot√£o voltar pressionado - Salvando altera√ß√µes")
                salvarTodasAlteracoesPendentes()
                finish() // Volta para a tela anterior
            }

            // MODIFICA√á√ÉO: Configurar bot√£o adicionar exerc√≠cio para navegar para TelaCriarFichaTreino_Funcionario
            try {
                btnAdicionarExercicio.setOnClickListener {
                    Log.d("ADD_EXERCICIO_BTN", "Bot√£o adicionar exerc√≠cio clicado - navegando para TelaCriarFichaTreino_Funcionario")
                    navegarParaTelaCriarExercicio()
                }
            } catch (e: Exception) {
                Log.w("EDICAO_FICHA", "Bot√£o adicionar exerc√≠cio n√£o encontrado no layout: ${e.message}")
            }

            Log.d("EDICAO_FICHA", "Eventos configurados com sucesso")

        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro ao configurar eventos", e)
            throw e
        }
    }

    // NOVO M√âTODO: Navegar para TelaCriarFichaTreino_Funcionario
    private fun navegarParaTelaCriarExercicio() {
        if (fichasList.isEmpty()) {
            Toast.makeText(this, "Nenhuma ficha carregada", Toast.LENGTH_SHORT).show()
            return
        }

        val ficha = fichasList.first()

        Log.d("NAVEGAR_CRIAR_EXERCICIO", "=== NAVEGANDO PARA TELA CRIAR EXERC√çCIO ===")
        Log.d("NAVEGAR_CRIAR_EXERCICIO", "Ficha: ${ficha.letra} - ${ficha.nome}")
        Log.d("NAVEGAR_CRIAR_EXERCICIO", "Document ID: '$documentId'")
        Log.d("NAVEGAR_CRIAR_EXERCICIO", "Aluno Doc ID: '$alunoDocId'")

        // VALIDA√á√ÉO CR√çTICA
        if (documentId.isEmpty()) {
            Log.e("NAVEGAR_CRIAR_EXERCICIO", "‚ùå ERRO: Document ID est√° vazio!")
            Toast.makeText(this, "ERRO: ID do documento n√£o encontrado!", Toast.LENGTH_LONG).show()
            return
        }

        // CR√çTICO: Se alunoDocId estiver vazio, tentar recuperar do SharedPreferences
        var alunoIdFinal = alunoDocId
        if (alunoIdFinal.isEmpty()) {
            Log.w("NAVEGAR_CRIAR_EXERCICIO", "‚ö†Ô∏è AlunoDocId vazio, tentando recuperar do SharedPreferences...")
            val prefs = getSharedPreferences("alunoPrefs", MODE_PRIVATE)
            alunoIdFinal = prefs.getString("alunoDocId", "") ?: ""
            Log.d("NAVEGAR_CRIAR_EXERCICIO", "AlunoDocId recuperado: '$alunoIdFinal'")

            if (alunoIdFinal.isEmpty()) {
                Log.e("NAVEGAR_CRIAR_EXERCICIO", "‚ùå ERRO CR√çTICO: AlunoDocId n√£o encontrado!")
                Toast.makeText(this, "ERRO: ID do aluno n√£o encontrado!\nN√£o ser√° poss√≠vel adicionar exerc√≠cios.", Toast.LENGTH_LONG).show()
                return
            }
        }

        try {
            val intent = Intent(this, TelaCriarFichaTreino_Funcionario::class.java).apply {
                // DADOS ESSENCIAIS - TODOS OS CAMPOS PREENCHIDOS
                putExtra("documentId", documentId)
                putExtra("alunoDocId", alunoIdFinal)  // Usar o ID validado
                putExtra("ficha_letra", ficha.letra)
                putExtra("ficha_nome", ficha.nome)
                putExtra("ficha_descricao", fichaDescricao)
                putExtra("modo_edicao", true)
                putExtra("action", "add_exercicio")

                Log.d("NAVEGAR_CRIAR_EXERCICIO", "‚úÖ Intent criado com dados:")
                Log.d("NAVEGAR_CRIAR_EXERCICIO", "  - documentId: '$documentId'")
                Log.d("NAVEGAR_CRIAR_EXERCICIO", "  - alunoDocId: '$alunoIdFinal'")
                Log.d("NAVEGAR_CRIAR_EXERCICIO", "  - ficha_letra: '${ficha.letra}'")
                Log.d("NAVEGAR_CRIAR_EXERCICIO", "  - ficha_nome: '${ficha.nome}'")
                Log.d("NAVEGAR_CRIAR_EXERCICIO", "  - modo_edicao: true")
                Log.d("NAVEGAR_CRIAR_EXERCICIO", "  - action: 'add_exercicio'")
            }

            // Usar startActivityForResult para receber resultado
            startActivityForResult(intent, REQUEST_CODE_ADD_EXERCICIO)
            Log.d("NAVEGAR_CRIAR_EXERCICIO", "üöÄ Navega√ß√£o iniciada com sucesso")

        } catch (e: Exception) {
            Log.e("NAVEGAR_CRIAR_EXERCICIO", "‚ùå Erro ao navegar para TelaCriarFichaTreino_Funcionario", e)
            Toast.makeText(
                this,
                "Erro ao abrir tela de cria√ß√£o: ${e.message}",
                Toast.LENGTH_SHORT
            ).show()
        }
    }

    // M√âTODO REMOVIDO: adicionarNovoExercicio (substitu√≠do pela navega√ß√£o)

    // M√âTODO REMOVIDO: adicionarExercicioAFicha (n√£o ser√° mais usado, exerc√≠cios ser√£o adicionados via TelaCriarFichaTreino_Funcionario)

    // Sobrescrever m√©todos do ciclo de vida para salvar altera√ß√µes
    override fun onPause() {
        super.onPause()
        Log.d("LIFECYCLE", "onPause - Salvando altera√ß√µes pendentes")
        salvarTodasAlteracoesPendentes()
    }

    override fun onStop() {
        super.onStop()
        Log.d("LIFECYCLE", "onStop - Salvando altera√ß√µes pendentes")
        salvarTodasAlteracoesPendentes()
    }

    override fun onDestroy() {
        Log.d("LIFECYCLE", "onDestroy - Limpando recursos e salvando altera√ß√µes")

        // Cancelar timer
        saveDebounceTimer?.cancel()

        // Salvar altera√ß√µes pendentes
        salvarTodasAlteracoesPendentes()

        super.onDestroy()
    }

    // Interceptar bot√£o voltar do sistema
    override fun onBackPressed() {
        Log.d("LIFECYCLE", "onBackPressed - Salvando altera√ß√µes antes de voltar")
        salvarTodasAlteracoesPendentes()
        super.onBackPressed()
    }

    // Tratamento para quando o usu√°rio minimiza o app
    override fun onUserLeaveHint() {
        super.onUserLeaveHint()
        Log.d("LIFECYCLE", "onUserLeaveHint - App minimizado, salvando altera√ß√µes")
        salvarTodasAlteracoesPendentes()
    }

    // M√©todo para salvar todas as altera√ß√µes pendentes
    private fun salvarTodasAlteracoesPendentes() {
        try {
            // For√ßar salvamento de campos que podem estar sendo editados
            if (::fichaTreinoAdapter.isInitialized) {
                fichaTreinoAdapter.salvarTodasAlteracoesPendentes()
            }

            // Se h√° altera√ß√µes pendentes, salvar tudo
            if (hasUnsavedChanges) {
                Log.d("SAVE_PENDING", "H√° altera√ß√µes pendentes, salvando...")
                salvarAlteracoesNoFirestore()
            } else {
                Log.d("SAVE_PENDING", "Nenhuma altera√ß√£o pendente")
            }
        } catch (e: Exception) {
            Log.e("SAVE_PENDING_ERROR", "Erro ao salvar altera√ß√µes pendentes", e)
        }
    }

    // M√©todo de salvamento existente
    private fun salvarAlteracoesNoFirestore() {
        if (fichasList.isEmpty()) {
            Log.d("FIRESTORE_SAVE", "Nenhuma ficha para salvar")
            return
        }

        val ficha = fichasList.first()
        Log.d("FIRESTORE_SAVE", "Salvando todas as altera√ß√µes da ficha: ${ficha.letra}")

        salvarFichaAlteradaNoFirestore(ficha)
    }

    // M√©todo adicional para for√ßar atualiza√ß√£o do contador
    private fun atualizarContadorExercicios() {
        if (fichasList.isNotEmpty()) {
            // For√ßar atualiza√ß√£o do primeiro item (√∫nica ficha)
            fichaTreinoAdapter.notifyItemChanged(0)
            fichaTreinoAdapter.atualizarContadores()
        }
    }

    // M√©todo p√∫blico para for√ßar recarregamento se necess√°rio
    fun recarregarFicha() {
        carregarFichaEspecificaDoFirestore()
    }

    companion object {
        // Constante para identificar o request code
        private const val REQUEST_CODE_ADD_EXERCICIO = 1001
    }
}







/*
package com.example.unipump

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.Button
import android.widget.ImageButton
import android.widget.ScrollView
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.unipump.adapters.FichaTreinoFunAdapter
import com.example.unipump.models.exercicioFun
import com.example.unipump.models.fichaTreinoFun
import com.example.unipump.models.serieFun
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.google.firebase.firestore.FirebaseFirestore
import java.util.Timer
import java.util.TimerTask

class TelaEdicaoFichaTreino_funcionario : AppCompatActivity() {

    private lateinit var btnNavegacao: BottomNavigationView
    private lateinit var btnSetaVoltar: ImageButton
    private lateinit var btnAdicionarExercicio: Button
    private lateinit var recyclerViewFichas: RecyclerView
    private lateinit var scrollView: ScrollView

    // Firestore
    private lateinit var db: FirebaseFirestore
    private var alunoDocId: String = ""
    private var documentId: String = "" // NOVO: ID √∫nico do documento no Firestore
    private var fichaLetra: String = ""
    private var fichaNome: String = ""
    private var fichaDescricao: String = ""

    // DEPRECADO: fichaId ser√° substitu√≠do por documentId
    @Deprecated("Use documentId instead")
    private var fichaId: String = ""

    // Adapter - Uma √∫nica ficha ser√° exibida, mas mantemos a estrutura de lista
    private lateinit var fichaTreinoAdapter: FichaTreinoFunAdapter
    private val fichasList = mutableListOf<fichaTreinoFun>()

    // Flag para controlar se h√° altera√ß√µes pendentes
    private var hasUnsavedChanges = false
    private var saveDebounceTimer: Timer? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        try {
            enableEdgeToEdge()
            setContentView(R.layout.activity_tela_edicao_ficha_treino_funcionario)

            // Inicializar Firestore
            db = FirebaseFirestore.getInstance()

            // Recuperar dados da ficha espec√≠fica
            if (!recuperarDadosIntent()) {
                return // Se n√£o conseguir recuperar dados, sai da activity
            }

            // Inicializar views
            initViews()

            // Configurar t√≠tulo da ficha
            configurarTituloFicha()

            // Configurar RecyclerView
            setupRecyclerView()

            // Debug da estrutura do Firestore
            debugFirestoreStructure()

            // Configurar eventos
            configurarEventos()

            // Carregar APENAS a ficha espec√≠fica do Firestore
            carregarFichaEspecificaDoFirestore()

        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro no onCreate", e)
            Toast.makeText(this, "Erro ao inicializar tela: ${e.message}", Toast.LENGTH_LONG).show()
            finish()
        }
    }

    // M√âTODO CORRIGIDO: Agora recupera o documentId
    private fun recuperarDadosIntent(): Boolean {
        return try {
            // CR√çTICO: Recuperar o documentId passado da tela anterior
            documentId = intent.getStringExtra("documentId") ?: ""
            alunoDocId = intent.getStringExtra("alunoDocId") ?: ""
            fichaLetra = intent.getStringExtra("ficha_letra") ?: ""
            fichaNome = intent.getStringExtra("ficha_nome") ?: ""
            fichaDescricao = intent.getStringExtra("ficha_descricao") ?: ""

            // Para compatibilidade com c√≥digo antigo
            fichaId = documentId

            Log.d("EDICAO_FICHA", "=== DADOS RECUPERADOS ===")
            Log.d("EDICAO_FICHA", "Document ID: $documentId")
            Log.d("EDICAO_FICHA", "Aluno ID: $alunoDocId")
            Log.d("EDICAO_FICHA", "Ficha Letra: $fichaLetra")
            Log.d("EDICAO_FICHA", "Ficha Nome: $fichaNome")

            // Se n√£o veio por intent, tentar recuperar do SharedPreferences
            if (alunoDocId.isEmpty()) {
                val prefs = getSharedPreferences("alunoPrefs", MODE_PRIVATE)
                alunoDocId = prefs.getString("alunoDocId", "") ?: ""
                Log.d("EDICAO_FICHA", "Aluno ID recuperado do SharedPreferences: $alunoDocId")
            }

            // Verifica√ß√µes de seguran√ßa
            if (documentId.isEmpty()) {
                Toast.makeText(this, "ERRO: ID do documento n√£o encontrado!", Toast.LENGTH_LONG).show()
                Log.e("EDICAO_FICHA", "Document ID est√° vazio - n√£o ser√° poss√≠vel salvar altera√ß√µes!")
                finish()
                false
            } else if (alunoDocId.isEmpty()) {
                Toast.makeText(this, "ERRO: ID do aluno n√£o encontrado!", Toast.LENGTH_LONG).show()
                Log.e("EDICAO_FICHA", "Aluno ID est√° vazio!")
                finish()
                false
            } else if (fichaLetra.isEmpty()) {
                Toast.makeText(this, "ERRO: Letra da ficha n√£o encontrada!", Toast.LENGTH_SHORT).show()
                Log.e("EDICAO_FICHA", "Ficha letra est√° vazia!")
                finish()
                false
            } else {
                Log.d("EDICAO_FICHA", "‚úÖ Todos os dados necess√°rios foram recuperados com sucesso")
                true
            }
        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro ao recuperar dados do intent", e)
            Toast.makeText(this, "Erro ao recuperar dados", Toast.LENGTH_SHORT).show()
            finish()
            false
        }
    }

    private fun initViews() {
        try {
            btnNavegacao = findViewById(R.id.bottom_navigation)
            btnSetaVoltar = findViewById(R.id.SetaVoltarTelaEdicaoFicha)
            btnAdicionarExercicio = findViewById(R.id.btnAdicionar)
            recyclerViewFichas = findViewById(R.id.recyclerViewFichas)
            scrollView = findViewById(R.id.scrollView)

            Log.d("EDICAO_FICHA", "Views inicializadas com sucesso")
        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro ao inicializar views", e)
            throw e
        }
    }

    private fun configurarTituloFicha() {
        Log.d("EDICAO_FICHA", "T√≠tulo configurado para: Ficha $fichaLetra - $fichaNome")
    }

    private fun setupRecyclerView() {
        // Configurar adapter com callbacks
        fichaTreinoAdapter = FichaTreinoFunAdapter(
            fichas = fichasList,
            onExcluirFicha = { fichaIdCallback: String, position: Int ->
                // Callback para excluir ficha completa
                excluirFichaCompleta(fichaIdCallback, position)
            },
            onFichaAlterada = { fichaAlterada: fichaTreinoFun, position: Int ->
                // CALLBACK PRINCIPAL: Quando qualquer coisa na ficha for alterada
                Log.d("FICHA_ALTERADA", "Ficha alterada: ${fichaAlterada.letra} - ${fichaAlterada.nome}")
                Log.d("FICHA_ALTERADA", "Total de exerc√≠cios: ${fichaAlterada.exercicios.size}")

                // Listar exerc√≠cios e suas s√©ries para debug
                fichaAlterada.exercicios.forEachIndexed { exIndex, exercicio ->
                    Log.d("FICHA_ALTERADA", "  Exerc√≠cio $exIndex: ${exercicio.nome} (${exercicio.series.size} s√©ries)")
                    exercicio.series.forEachIndexed { serieIndex, serie ->
                        Log.d("FICHA_ALTERADA", "    S√©rie ${serie.numero}: ${serie.repeticoes} reps, ${serie.peso}, ${serie.tempo}s")
                    }
                }

                // Chamar o m√©todo que j√° existe para altera√ß√µes
                onFichaAlterada(fichaAlterada, position)
            }
        )

        recyclerViewFichas.apply {
            layoutManager = LinearLayoutManager(this@TelaEdicaoFichaTreino_funcionario)
            adapter = fichaTreinoAdapter

            // Configura√ß√µes otimizadas
            isNestedScrollingEnabled = false
            setHasFixedSize(false) // Permitir altura vari√°vel
            itemAnimator = null // Remover anima√ß√µes para melhor performance
        }

        // Debug do RecyclerView
        recyclerViewFichas.addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ ->
            Log.d("RECYCLERVIEW_DEBUG", "=== LAYOUT CHANGE ===")
            Log.d("RECYCLERVIEW_DEBUG", "Altura do RecyclerView: ${recyclerViewFichas.height}")
            Log.d("RECYCLERVIEW_DEBUG", "Itens vis√≠veis: ${recyclerViewFichas.childCount}")
            Log.d("RECYCLERVIEW_DEBUG", "Adapter count: ${fichaTreinoAdapter.itemCount}")

            // Verificar altura de cada item
            for (i in 0 until recyclerViewFichas.childCount) {
                val child = recyclerViewFichas.getChildAt(i)
                Log.d("RECYCLERVIEW_DEBUG", "Item $i altura: ${child.height}px")
            }
            Log.d("RECYCLERVIEW_DEBUG", "========================")
        }
    }

    // M√âTODO CORRIGIDO: Agora usa o documentId diretamente
    private fun debugFirestoreStructure() {
        Log.d("DEBUG_FIRESTORE", "=== INICIANDO DEBUG DA ESTRUTURA ESPEC√çFICA ===")
        Log.d("DEBUG_FIRESTORE", "Document ID: $documentId")
        Log.d("DEBUG_FIRESTORE", "Aluno ID: $alunoDocId")

        db.collection("alunos")
            .document(alunoDocId)
            .collection("treino")
            .document(documentId) // USAR DOCUMENT ID ESPEC√çFICO
            .get()
            .addOnSuccessListener { document ->
                Log.d("DEBUG_FIRESTORE", "Documento encontrado: ${document.exists()}")

                if (document.exists()) {
                    Log.d("DEBUG_FIRESTORE", "=== Dados do Documento ===")
                    Log.d("DEBUG_FIRESTORE", "ID: ${document.id}")
                    Log.d("DEBUG_FIRESTORE", "Letra: ${document.getString("letra")}")
                    Log.d("DEBUG_FIRESTORE", "Nome: ${document.getString("nome")}")

                    // Debug espec√≠fico dos exerc√≠cios
                    val exercicios = document.get("exercicios")
                    Log.d("DEBUG_FIRESTORE", "Exerc√≠cios (objeto completo): $exercicios")
                    Log.d("DEBUG_FIRESTORE", "Tipo dos exerc√≠cios: ${exercicios?.javaClass?.simpleName}")

                    if (exercicios is List<*>) {
                        Log.d("DEBUG_FIRESTORE", "Exerc√≠cios √© uma lista com ${exercicios.size} itens")
                        exercicios.forEachIndexed { exIndex, exercicio ->
                            Log.d("DEBUG_FIRESTORE", "  Exerc√≠cio $exIndex: $exercicio")
                            if (exercicio is Map<*, *>) {
                                val nome = exercicio["nome"]
                                val series = exercicio["series"]
                                Log.d("DEBUG_FIRESTORE", "    Nome: $nome")
                                Log.d("DEBUG_FIRESTORE", "    S√©ries: $series")
                                if (series is List<*>) {
                                    Log.d("DEBUG_FIRESTORE", "    N√∫mero de s√©ries: ${series.size}")
                                }
                            }
                        }
                    } else {
                        Log.w("DEBUG_FIRESTORE", "Exerc√≠cios N√ÉO √© uma lista! Tipo: ${exercicios?.javaClass}")
                    }
                } else {
                    Log.w("DEBUG_FIRESTORE", "Documento n√£o existe!")
                }

                Log.d("DEBUG_FIRESTORE", "=== FIM DO DEBUG ===")
            }
            .addOnFailureListener { e ->
                Log.e("DEBUG_FIRESTORE", "Erro no debug", e)
                e.printStackTrace()
            }
    }

    // M√©todo chamado quando uma ficha √© alterada
    private fun onFichaAlterada(fichaAlterada: fichaTreinoFun, position: Int) {
        Log.d("FICHA_ALTERADA", "Ficha alterada: ${fichaAlterada.letra} - ${fichaAlterada.nome}")

        // Marcar que h√° altera√ß√µes pendentes
        hasUnsavedChanges = true

        // Cancelar timer anterior
        saveDebounceTimer?.cancel()

        // Criar novo timer com delay de 1 segundo (debounce)
        saveDebounceTimer = Timer()
        saveDebounceTimer?.schedule(object : TimerTask() {
            override fun run() {
                runOnUiThread {
                    Log.d("DEBOUNCE_SAVE", "Executando salvamento com debounce")
                    salvarFichaAlteradaNoFirestore(fichaAlterada)
                }
            }
        }, 1000) // Aguarda 1 segundo ap√≥s a √∫ltima altera√ß√£o
    }

    // M√âTODO CORRIGIDO: Agora usa documentId para salvar
    private fun salvarFichaAlteradaNoFirestore(ficha: fichaTreinoFun) {
        Log.d("FIRESTORE_SAVE_IMMEDIATE", "=== SALVANDO ALTERA√á√ïES ===")
        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Document ID: $documentId")
        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Ficha: ${ficha.letra} - ${ficha.nome}")

        if (documentId.isEmpty() || alunoDocId.isEmpty()) {
            Log.e("FIRESTORE_SAVE_IMMEDIATE", "‚ùå IDs inv√°lidos")
            return
        }

        // CR√çTICO: Usar valores atuais do objeto ficha (que j√° foi atualizado pelo adapter)
        val letraAtualizada = ficha.letra
        val nomeAtualizado = ficha.nome

        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Valores a salvar - Letra: '$letraAtualizada', Nome: '$nomeAtualizado'")

        // Converter exerc√≠cios para o formato do Firestore
        val exerciciosArray = ficha.exercicios.map { exercicio ->
            mapOf(
                "nome" to exercicio.nome,
                "execucao" to "Execu√ß√£o normal",
                "frame" to "URL...",
                "series" to exercicio.series.map { serie ->
                    mapOf(
                        "ordem" to serie.numero.toString(),
                        "reps" to serie.repeticoes.toString(),
                        "peso" to serie.peso,
                        "descanso" to serie.tempo
                    )
                }
            )
        }

        val fichaData = hashMapOf(
            "letra" to letraAtualizada,
            "nome" to nomeAtualizado,
            "descricao" to fichaDescricao,
            "quantidadeExercicios" to ficha.exercicios.size,
            "exercicios" to exerciciosArray,
            "dataModificacao" to com.google.firebase.Timestamp.now()
        )

        Log.d("FIRESTORE_SAVE_IMMEDIATE", "Caminho: alunos/$alunoDocId/treino/$documentId")

        db.collection("alunos")
            .document(alunoDocId)
            .collection("treino")
            .document(documentId)
            .update(fichaData as Map<String, Any>)
            .addOnSuccessListener {
                Log.d("FIRESTORE_SAVE_IMMEDIATE", "‚úÖ Ficha '$letraAtualizada' salva com sucesso!")
                hasUnsavedChanges = false

                // Atualizar vari√°veis locais para sincronia
                fichaLetra = letraAtualizada
                fichaNome = nomeAtualizado

                Log.d("FIRESTORE_SAVE_IMMEDIATE", "Vari√°veis locais atualizadas")
            }
            .addOnFailureListener { e ->
                Log.e("FIRESTORE_SAVE_IMMEDIATE", "‚ùå Erro ao salvar ficha", e)
                hasUnsavedChanges = true

                runOnUiThread {
                    Toast.makeText(this@TelaEdicaoFichaTreino_funcionario,
                        "Erro ao salvar: ${e.localizedMessage}", Toast.LENGTH_SHORT).show()
                }

                // Retry ap√≥s 5 segundos
                Handler(Looper.getMainLooper()).postDelayed({
                    if (hasUnsavedChanges) {
                        Log.d("RETRY_SAVE", "Tentando salvar novamente ap√≥s erro")
                        salvarFichaAlteradaNoFirestore(ficha)
                    }
                }, 5000)
            }
    }

    private fun excluirFichaCompleta(fichaIdCallback: String, position: Int) {
        Log.d("EXCLUIR_FICHA", "Iniciando exclus√£o da ficha ID: $fichaIdCallback, posi√ß√£o: $position")

        // 1. Excluir do Firestore primeiro
        excluirFichaDoFirestore(fichaIdCallback) { sucesso ->
            runOnUiThread {
                if (sucesso) {
                    // 2. Se excluiu do Firestore com sucesso, remover da tela
                    fichaTreinoAdapter.removeFicha(position)

                    Toast.makeText(
                        this@TelaEdicaoFichaTreino_funcionario,
                        "Ficha exclu√≠da com sucesso",
                        Toast.LENGTH_SHORT
                    ).show()

                    Log.d("EXCLUIR_FICHA", "Ficha exclu√≠da com sucesso")

                    // 3. Se era a √∫nica ficha, voltar para tela anterior
                    if (fichasList.isEmpty()) {
                        Toast.makeText(
                            this@TelaEdicaoFichaTreino_funcionario,
                            "N√£o h√° mais fichas para editar",
                            Toast.LENGTH_SHORT
                        ).show()

                        // Voltar para tela anterior
                        finish()
                    }

                } else {
                    Toast.makeText(
                        this@TelaEdicaoFichaTreino_funcionario,
                        "Erro ao excluir ficha",
                        Toast.LENGTH_LONG
                    ).show()
                }
            }
        }
    }

    private fun excluirFichaDoFirestore(fichaIdToDelete: String, callback: (Boolean) -> Unit) {
        Log.d("FIRESTORE_DELETE", "Excluindo ficha do Firestore - ID: $fichaIdToDelete")

        db.collection("alunos")
            .document(alunoDocId)
            .collection("treino")
            .document(fichaIdToDelete)
            .delete()
            .addOnSuccessListener {
                Log.d("FIRESTORE_DELETE", "Ficha exclu√≠da do Firestore com sucesso")
                callback(true)
            }
            .addOnFailureListener { exception ->
                Log.e("FIRESTORE_DELETE", "Erro ao excluir ficha do Firestore", exception)
                callback(false)
            }
    }

    // M√âTODO CORRIGIDO: Agora carrega usando documentId diretamente
    private fun carregarFichaEspecificaDoFirestore() {
        try {
            fichasList.clear()

            Log.d("FIRESTORE_EDICAO", "=== CARREGANDO FICHA ESPEC√çFICA ===")
            Log.d("FIRESTORE_EDICAO", "Document ID: $documentId")
            Log.d("FIRESTORE_EDICAO", "Aluno ID: $alunoDocId")

            // BUSCAR DIRETAMENTE PELO DOCUMENT ID (MAIS EFICIENTE)
            db.collection("alunos")
                .document(alunoDocId)
                .collection("treino")
                .document(documentId) // USAR DOCUMENT ID ESPEC√çFICO
                .get()
                .addOnSuccessListener { document ->
                    try {
                        Log.d("FIRESTORE_EDICAO", "Documento encontrado: ${document.exists()}")

                        if (!document.exists()) {
                            Log.w("FIRESTORE_EDICAO", "Documento n√£o encontrado: $documentId")
                            runOnUiThread {
                                Toast.makeText(
                                    this@TelaEdicaoFichaTreino_funcionario,
                                    "Ficha n√£o encontrada", Toast.LENGTH_SHORT
                                ).show()
                                finish() // Voltar se n√£o encontrar
                            }
                            return@addOnSuccessListener
                        }

                        // Processar o documento
                        val letra = document.getString("letra") ?: ""
                        val nome = document.getString("nome") ?: ""

                        Log.d("FIRESTORE_EDICAO", "Processando ficha: $documentId - Letra: $letra - Nome: $nome")

                        // Debug dos exerc√≠cios
                        val exerciciosRaw = document.get("exercicios")
                        Log.d("FIRESTORE_EDICAO", "Exerc√≠cios RAW do Firestore: $exerciciosRaw")
                        Log.d("FIRESTORE_EDICAO", "Tipo dos exerc√≠cios: ${exerciciosRaw?.javaClass?.simpleName}")

                        val exerciciosArray = document.get("exercicios") as? List<Map<String, Any>> ?: emptyList()
                        Log.d("FIRESTORE_EDICAO", "Array de exerc√≠cios convertido - Tamanho: ${exerciciosArray.size}")

                        val exerciciosList = mutableListOf<exercicioFun>()

                        // Processamento dos exerc√≠cios
                        exerciciosArray.forEachIndexed { exercicioIndex, exercicioMap ->
                            try {
                                Log.d("FIRESTORE_EDICAO", "=== Processando exerc√≠cio $exercicioIndex ===")
                                Log.d("FIRESTORE_EDICAO", "Dados do exerc√≠cio: $exercicioMap")

                                val nomeExercicio = exercicioMap["nome"]?.toString() ?: ""
                                Log.d("FIRESTORE_EDICAO", "Nome do exerc√≠cio: $nomeExercicio")

                                // Debug das s√©ries
                                val seriesRaw = exercicioMap["series"]
                                Log.d("FIRESTORE_EDICAO", "S√©ries RAW: $seriesRaw")
                                Log.d("FIRESTORE_EDICAO", "Tipo das s√©ries: ${seriesRaw?.javaClass?.simpleName}")

                                val seriesArray = exercicioMap["series"] as? List<Map<String, Any>> ?: emptyList()
                                Log.d("FIRESTORE_EDICAO", "Array de s√©ries convertido - Tamanho: ${seriesArray.size}")

                                val seriesList = seriesArray.mapIndexed { serieIndex, serieMap ->
                                    Log.d("FIRESTORE_EDICAO", "   S√©rie $serieIndex: $serieMap")

                                    serieFun(
                                        id = "${documentId}_ex${exercicioIndex}_serie${serieIndex}",
                                        numero = serieMap["ordem"]?.toString()?.toIntOrNull() ?: (serieIndex + 1),
                                        repeticoes = serieMap["reps"]?.toString()?.toIntOrNull() ?: 0,
                                        peso = serieMap["peso"]?.toString() ?: "",
                                        tempo = serieMap["descanso"]?.toString() ?: ""
                                    )
                                }.toMutableList()

                                val exercicio = exercicioFun(
                                    id = "${documentId}_exercicio_$exercicioIndex",
                                    nome = nomeExercicio,
                                    series = seriesList
                                )

                                exerciciosList.add(exercicio)
                                Log.d("FIRESTORE_EDICAO", "Exerc√≠cio adicionado: $nomeExercicio com ${seriesList.size} s√©ries")
                                Log.d("FIRESTORE_EDICAO", "Total de exerc√≠cios na lista agora: ${exerciciosList.size}")

                            } catch (e: Exception) {
                                Log.e("FIRESTORE_EDICAO", "Erro ao processar exerc√≠cio $exercicioIndex", e)
                                e.printStackTrace()
                            }
                        }

                        // Log final antes de criar a ficha
                        Log.d("FIRESTORE_EDICAO", "RESUMO FINAL:")
                        Log.d("FIRESTORE_EDICAO", "Total de exerc√≠cios processados: ${exerciciosList.size}")
                        exerciciosList.forEachIndexed { index, exercicio ->
                            Log.d("FIRESTORE_EDICAO", "Exerc√≠cio $index: ${exercicio.nome} (${exercicio.series.size} s√©ries)")
                        }

                        val ficha = fichaTreinoFun(
                            id = documentId, // USAR DOCUMENT ID
                            letra = letra,
                            nome = nome,
                            exercicios = exerciciosList
                        )

                        fichasList.add(ficha)
                        Log.d("FIRESTORE_EDICAO", "Ficha carregada: $letra - $nome com ${exerciciosList.size} exerc√≠cios")

                        // Atualizar UI
                        runOnUiThread {
                            try {
                                if (::fichaTreinoAdapter.isInitialized) {
                                    Log.d("FIRESTORE_EDICAO", "Notificando adapter com ${fichasList.size} fichas")
                                    if (fichasList.isNotEmpty()) {
                                        Log.d("FIRESTORE_EDICAO", "Primeira ficha tem ${fichasList.first().exercicios.size} exerc√≠cios")
                                    }

                                    fichaTreinoAdapter.notifyDataSetChanged()

                                    // Verifica√ß√£o adicional ap√≥s notificar
                                    recyclerViewFichas.post {
                                        Log.d("FIRESTORE_EDICAO", "Ap√≥s notifyDataSetChanged:")
                                        Log.d("FIRESTORE_EDICAO", "Adapter item count: ${fichaTreinoAdapter.itemCount}")
                                        Log.d("FIRESTORE_EDICAO", "RecyclerView child count: ${recyclerViewFichas.childCount}")

                                        // For√ßar atualiza√ß√£o dos contadores
                                        fichaTreinoAdapter.atualizarContadores()
                                    }
                                }

                                Toast.makeText(
                                    this@TelaEdicaoFichaTreino_funcionario,
                                    "Ficha $letra carregada com ${fichasList.firstOrNull()?.exercicios?.size ?: 0} exerc√≠cios",
                                    Toast.LENGTH_SHORT
                                ).show()

                            } catch (e: Exception) {
                                Log.e("FIRESTORE_EDICAO", "Erro ao atualizar UI", e)
                                e.printStackTrace()
                            }
                        }

                    } catch (e: Exception) {
                        Log.e("FIRESTORE_EDICAO", "Erro geral ao processar ficha", e)
                        e.printStackTrace()
                        runOnUiThread {
                            Toast.makeText(
                                this@TelaEdicaoFichaTreino_funcionario,
                                "Erro ao processar ficha: ${e.message}", Toast.LENGTH_LONG
                            ).show()
                        }
                    }
                }
                .addOnFailureListener { exception ->
                    Log.e("FIRESTORE_EDICAO", "Erro ao carregar ficha espec√≠fica", exception)
                    exception.printStackTrace()
                    runOnUiThread {
                        Toast.makeText(
                            this@TelaEdicaoFichaTreino_funcionario,
                            "Erro ao carregar ficha: ${exception.localizedMessage}",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                }

        } catch (e: Exception) {
            Log.e("FIRESTORE_EDICAO", "Erro ao iniciar carregamento da ficha", e)
            e.printStackTrace()
            Toast.makeText(this, "Erro ao carregar ficha: ${e.message}", Toast.LENGTH_LONG).show()
        }
    }

    private fun configurarEventos() {
        try {
            btnNavegacao.setOnNavigationItemSelectedListener { item ->
                when (item.itemId) {
                    R.id.nav_inicio -> {
                        val intent = Intent(this, TelaFuncionario::class.java)
                        startActivity(intent)
                        true
                    }
                    R.id.nav_chat -> {
                        val intent = Intent(this, TelaChat::class.java)
                        startActivity(intent)
                        true
                    }
                    R.id.nav_config -> {
                        val intent = Intent(this, TelaConfiguracao_Funcionario::class.java)
                        startActivity(intent)
                        true
                    }
                    else -> false
                }
            }

            btnSetaVoltar.setOnClickListener {
                Log.d("LIFECYCLE", "Bot√£o voltar pressionado - Salvando altera√ß√µes")
                salvarTodasAlteracoesPendentes()
                finish() // Volta para a tela anterior
            }

            // Configurar bot√£o adicionar exerc√≠cio
            try {
                btnAdicionarExercicio.setOnClickListener {
                    Log.d("ADD_EXERCICIO_BTN", "Bot√£o adicionar exerc√≠cio clicado")
                    adicionarNovoExercicio()
                }
            } catch (e: Exception) {
                Log.w("EDICAO_FICHA", "Bot√£o adicionar exerc√≠cio n√£o encontrado no layout: ${e.message}")
            }

            Log.d("EDICAO_FICHA", "Eventos configurados com sucesso")

        } catch (e: Exception) {
            Log.e("EDICAO_FICHA_ERROR", "Erro ao configurar eventos", e)
            throw e
        }
    }

    // M√©todo para adicionar novo exerc√≠cio √† ficha atual
    private fun adicionarNovoExercicio() {
        if (fichasList.isEmpty()) {
            Toast.makeText(this, "Nenhuma ficha carregada", Toast.LENGTH_SHORT).show()
            return
        }

        // Mostrar di√°logo para inserir nome do exerc√≠cio
        val builder = androidx.appcompat.app.AlertDialog.Builder(this)
        val input = android.widget.EditText(this).apply {
            hint = "Nome do exerc√≠cio"
            setPadding(32, 32, 32, 32)
        }

        builder.setTitle("Adicionar Exerc√≠cio")
            .setView(input)
            .setPositiveButton("Adicionar") { _, _ ->
                val nomeExercicio = input.text.toString().trim()
                if (nomeExercicio.isNotEmpty()) {
                    adicionarExercicioAFicha(nomeExercicio)
                } else {
                    Toast.makeText(this, "Digite o nome do exerc√≠cio", Toast.LENGTH_SHORT).show()
                }
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }

    // M√âTODO CORRIGIDO: Usar documentId para criar IDs √∫nicos
    private fun adicionarExercicioAFicha(nomeExercicio: String) {
        val ficha = fichasList.first() // Temos apenas uma ficha

        // Criar novo exerc√≠cio com uma s√©rie padr√£o
        val novoExercicio = exercicioFun(
            id = "${documentId}_exercicio_${ficha.exercicios.size}", // USAR DOCUMENT ID
            nome = nomeExercicio,
            series = mutableListOf(
                serieFun(
                    id = "${documentId}_ex${ficha.exercicios.size}_serie0", // USAR DOCUMENT ID
                    numero = 1,
                    repeticoes = 12,
                    peso = "",
                    tempo = "60"
                )
            )
        )

        // Adicionar √† ficha
        ficha.exercicios.add(novoExercicio)

        Log.d("ADD_EXERCICIO_MAIN", "Exerc√≠cio '$nomeExercicio' adicionado √† ficha ${ficha.letra}")
        Log.d("ADD_EXERCICIO_MAIN", "Total de exerc√≠cios agora: ${ficha.exercicios.size}")

        // Notificar que a ficha foi alterada (isso salvar√° automaticamente)
        onFichaAlterada(ficha, 0)

        // Atualizar o adapter (isso atualizar√° o contador automaticamente)
        fichaTreinoAdapter.notifyItemChanged(0)

        // For√ßar atualiza√ß√£o do contador
        fichaTreinoAdapter.atualizarContadores()

        Toast.makeText(this, "Exerc√≠cio '$nomeExercicio' adicionado!", Toast.LENGTH_SHORT).show()
    }

    // Sobrescrever m√©todos do ciclo de vida para salvar altera√ß√µes
    override fun onPause() {
        super.onPause()
        Log.d("LIFECYCLE", "onPause - Salvando altera√ß√µes pendentes")
        salvarTodasAlteracoesPendentes()
    }

    override fun onStop() {
        super.onStop()
        Log.d("LIFECYCLE", "onStop - Salvando altera√ß√µes pendentes")
        salvarTodasAlteracoesPendentes()
    }

    override fun onDestroy() {
        Log.d("LIFECYCLE", "onDestroy - Limpando recursos e salvando altera√ß√µes")

        // Cancelar timer
        saveDebounceTimer?.cancel()

        // Salvar altera√ß√µes pendentes
        salvarTodasAlteracoesPendentes()

        super.onDestroy()
    }

    // Interceptar bot√£o voltar do sistema
    override fun onBackPressed() {
        Log.d("LIFECYCLE", "onBackPressed - Salvando altera√ß√µes antes de voltar")
        salvarTodasAlteracoesPendentes()
        super.onBackPressed()
    }

    // Tratamento para quando o usu√°rio minimiza o app
    override fun onUserLeaveHint() {
        super.onUserLeaveHint()
        Log.d("LIFECYCLE", "onUserLeaveHint - App minimizado, salvando altera√ß√µes")
        salvarTodasAlteracoesPendentes()
    }

    // M√©todo para salvar todas as altera√ß√µes pendentes
    private fun salvarTodasAlteracoesPendentes() {
        try {
            // For√ßar salvamento de campos que podem estar sendo editados
            if (::fichaTreinoAdapter.isInitialized) {
                fichaTreinoAdapter.salvarTodasAlteracoesPendentes()
            }

            // Se h√° altera√ß√µes pendentes, salvar tudo
            if (hasUnsavedChanges) {
                Log.d("SAVE_PENDING", "H√° altera√ß√µes pendentes, salvando...")
                salvarAlteracoesNoFirestore()
            } else {
                Log.d("SAVE_PENDING", "Nenhuma altera√ß√£o pendente")
            }
        } catch (e: Exception) {
            Log.e("SAVE_PENDING_ERROR", "Erro ao salvar altera√ß√µes pendentes", e)
        }
    }

    // M√©todo de salvamento existente
    private fun salvarAlteracoesNoFirestore() {
        if (fichasList.isEmpty()) {
            Log.d("FIRESTORE_SAVE", "Nenhuma ficha para salvar")
            return
        }

        val ficha = fichasList.first()
        Log.d("FIRESTORE_SAVE", "Salvando todas as altera√ß√µes da ficha: ${ficha.letra}")

        salvarFichaAlteradaNoFirestore(ficha)
    }

    // M√©todo adicional para for√ßar atualiza√ß√£o do contador
    private fun atualizarContadorExercicios() {
        if (fichasList.isNotEmpty()) {
            // For√ßar atualiza√ß√£o do primeiro item (√∫nica ficha)
            fichaTreinoAdapter.notifyItemChanged(0)
            fichaTreinoAdapter.atualizarContadores()
        }
    }

    // M√©todo p√∫blico para for√ßar recarregamento se necess√°rio
    fun recarregarFicha() {
        carregarFichaEspecificaDoFirestore()
    }
}*/